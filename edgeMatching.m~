function [label, accuracyScore] = edgeMatching(query)
%% @Param query: a nxmx3 image 
%% @Return a String label of the image that has the most similar edge as the query image 

%% Find the edge map of the query image 
edgeMap = cannyEdge(query); 

%% Crop the query image
croppedEdgeMap = cropEdgeMap(edgeMap); 

%% Import the library of images 
imagefiles = dir('*.jpeg');      
nfiles = length(imagefiles);
for ii=1:nfiles
   currentfilename = imagefiles(ii).name;
   currentimage = imread(currentfilename);
   images{ii} = currentimage;
end
[libraryOfEdgeMaps,labelsOfLibrary] =  createLibraryForEdgeMapping();  
%libraryOfEdgeMaps is a nxmxp matrix of cropped edge maps 
%labelsOfLibrary is a px1 vector of labels for each edge map in the libraryOfEdgeMaps

%% Loop over all the images in our library and find the one with the smallest cost 
minCost = 1000000000; 
maxCost = 0; 
bestMatchLabel='';
for index = 0:size(libraryOfEdgeMaps,1)
    libraryEdgeMap = libraryOfEdgeMaps(index,1);
    cost = computeCostOfDifference(croppedEdgeMap,libraryEdgeMap); 
    %if the cost of this image is lowest, assign it to the closest edge map
    %seen so far 
    if (cost < minCost)
        minCost = cost; 
        bestMatchLabel = labelsOfLibrary(index,1); 
    end 
    % find the maxCost to find the accuracy score 
    if (cost > maxCost)
        maxCost = cost; 
    end 
end 

%% Return the label of the library image with it's accuracy score 
label = bestMatchLabel; 
accuracyScore = cost / maxCost;  
end

